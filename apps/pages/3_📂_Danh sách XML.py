import streamlit as st
import sys
import os
import pandas as pd
import datetime
from datetime import datetime
import numpy as np
current_dir = os.path.dirname(os.path.abspath(__file__))
parent_dir = os.path.dirname(current_dir)
sys.path.append(parent_dir)
from apps.gcp_connector import *

import plotly.figure_factory as ff
import plotly.graph_objects as go
import plotly.express as px
from plotly.subplots import make_subplots

st.set_page_config(
    page_title="Tra c·ª©u & Theo d√µi danh s√°ch d·ªØ li·ªáu XML", page_icon="üîé", layout="wide"
)

current_dir = os.path.dirname(os.path.abspath(__file__))
parent_dir = os.path.dirname(current_dir)
sys.path.append(parent_dir)

# Setting main-function 1
container_function_1 = st.container(height = 250, border = True)
# Setting main-function 2
container_function_2_shape = 1000
container_function_2 = st.container(height = container_function_2_shape, border = True)

# Show data
with container_function_1:
  st.markdown(
      """
  ##### **:red[1. View d·ªØ li·ªáu XML ƒë√£ l∆∞u tr·ªØ]**
  """
  )
  st.markdown("*Ng∆∞·ªùi d√πng c√≥ th·ªÉ t√¨m ki·∫øm th√¥ng tin th√¥ng qua icon üîç*")

  #load_type = 'local'
  #load_type = 'gcs'
  load_type = 'simulated'
  if load_type == 'local':
    # Load XML currently
    XML_file = f"{parent_dir}\dataset_XML\data.xlsx"
    df_xml_data = pd.read_excel(XML_file, engine='openpyxl')
    st.dataframe(df_xml_data)
  
  elif load_type == 'gcs':
    st.warning("Hi·ªán t·∫°i ƒëang ƒë·ªçc DL l∆∞u tr·ªØ tr√™n Google Cloud Storage, (Read-Only)")
    from st_files_connection import FilesConnection
    conn = st.connection('gcs', type=FilesConnection)
    df_xml_data = read_XML_data(conn)
  else:
    st.warning("Hi·ªán t·∫°i ƒëang ƒë·ªçc DL l∆∞u tr·ªØ tr√™n Google Cloud Storage, (Read-Only)")
    df_xml_data = pd.DataFrame(columns=["T√™n file","K√Ω hi·ªáu m·∫´u s·ªë h√≥a ƒë∆°n","KH h√≥a ƒë∆°n","S·ªë h√≥a ƒë∆°n","Ng√†y l·∫≠p","M√£ hi·ªáu s·ªë","T√≠nh ch·∫•t h√≥a ƒë∆°n","T√™n ng∆∞·ªùi b√°n","M√£ s·ªë thu·∫ø ng∆∞·ªùi b√°n","T·ªïng ti·ªÅn (ch∆∞a c√≥ thu·∫ø GTGT)","T·ªïng ti·ªÅn thu·∫ø GTGT","T·ªïng ti·ªÅn thanh to√°n b·∫±ng s·ªë","K√Ω hi·ªáu h√≥a ƒë∆°n","DS Tr·ªën thu·∫ø","Thi·∫øu SHDon","Thi·∫øu MHSo","Th·ªùi gian c·∫≠p nh·∫≠p","User c·∫≠p nh·∫≠p"],
                                data=   [["1C24MTT_00001147.xml","1","C24MTT","1147","2024-05-17","","H√≥a ƒë∆°n g·ªëc","CHI NH√ÅNH C√îNG TY TNHH NH·∫§T LY","0200519875-001","489,000","48,900","537,900","1C24MTT",False,False,True,"2024-07-15 10:21:02","ncb_ketoannoibo"],
                                        ["8113485575-C24TTV26.xml","2","C24TTV","26","2024-05-14","","H√≥a ƒë∆°n g·ªëc","H·ªò KINH DOANH C∆† S·ªû C∆† ƒêI·ªÜN L·∫†NH THANH V√ÇN","8113485575","","","150,000","2C24TTV",False,False,True,"2024-07-15 10:21:02","ncb_ketoannoibo"],
                                        ["C24MHK-00011370-U9IMSEWIWP5-DPH.xml","1","C24MHK","11370","2024-04-11","","H√≥a ƒë∆°n g·ªëc","C√îNG TY C·ªî PH·∫¶N TAKAHIRO","0315827587","4,098,000","327,840","4,425,840","1C24MHK",False,False,True,"2024-07-15 10:21:02","ncb_ketoannoibo"],
                                        ["C24THB-00000232-VALWOLD7K64-DPH.xml","1","C24THB","232","2024-06-12","","H√≥a ƒë∆°n g·ªëc","C√îNG TY C·ªî PH·∫¶N QU·∫¢N L√ù TH∆Ø∆†NG M·∫†I D·ªäCH V·ª§ T·ªîNG H·ª¢P HAI B√Ä TR∆ØNG","0110215449","140,694,457","11,255,558","151,950,015","1C24THB",False,False,True,"2024-07-15 10:21:02","ncb_ketoannoibo"],
                                        ["1_001_K24TAA_2780_2017.xml","1","K24TAA","2780","2024-06-14","","H√≥a ƒë∆°n g·ªëc","NG√ÇN H√ÄNG TH∆Ø∆†NG M·∫†I C·ªî PH·∫¶N QU·ªêC D√ÇN","1700169765","20,000","2,000","22,000","1K24TAA",False,False,False,"2024-07-15 10:21:41","ncb_ketoannoibo"],
                                        ["C24MDA-00003370-T9TATD0I016-DPH.xml","1","C24MDA","3370","2024-04-27","","H√≥a ƒë∆°n g·ªëc","C√îNG TY TNHH ƒê·∫¶U T∆Ø X√ÇY D·ª∞NG TH∆Ø∆†NG M·∫†I DU L·ªäCH V√Ä ·∫®M TH·ª∞C ƒê√îNG D∆Ø∆†NG","0107514336","3,759,200","302,536","4,061,736","1C24MDA",False,False,True,"2024-07-15 10:21:41","ncb_ketoannoibo"],
                                        ["XML loi.xml","1","C24TLD","846","2024-07-10","","H√≥a ƒë∆°n g·ªëc","C√îNG TY TNHH TH∆Ø∆†NG M·∫†I- D·ªäCH V·ª§ L√ä DUY","0302698197","2,777,778","222,222","3,000,000","1C24TLD",False,False,True,"2024-07-15 10:21:41","ncb_ketoannoibo"]])
  st.dataframe(df_xml_data)

with container_function_2:
  st.markdown(
      """
  ##### **:red[2. Insight d·ªØ li·ªáu XML ƒë√£ l∆∞u tr·ªØ]**
  """
  )
  total_xml_file = len(set(df_xml_data['T√™n file']))
  total_ma_so_thue = len(set(df_xml_data['M√£ s·ªë thu·∫ø ng∆∞·ªùi b√°n']))
  total_so_lan_nhap_du_lieu = len(set(df_xml_data['Th·ªùi gian c·∫≠p nh·∫≠p']))
  max_lan_nhap_du_lieu = max(df_xml_data['Th·ªùi gian c·∫≠p nh·∫≠p'])
  container_metric_shape = 150
  container_metric = st.container(height = container_metric_shape, border = True)
  container_chart = st.container(height = container_function_2_shape - container_metric_shape, border = True)

  with container_metric:
    col_metric_1, col_metric_2, col_metric_3 = st.columns([1]*3)
    with col_metric_1:
      st.metric(label=":blue[**#Ô∏è‚É£ S·ªê L∆Ø·ª¢NG FILE XML**]", value=total_xml_file)
    with col_metric_2:
      st.metric(label=":blue[**#Ô∏è‚É£ S·ªê L∆Ø·ª¢NG M√É S·ªê THU·∫æ**]", value=total_ma_so_thue)
    with col_metric_3:
      st.metric(label=":blue[**#Ô∏è‚É£ S·ªê L·∫¶N NH·∫¨P D·ªÆ LI·ªÜU**]", value=total_so_lan_nhap_du_lieu,delta=f"Latest {max_lan_nhap_du_lieu}", delta_color="off")
  with container_chart:
    col_chart_1, col_chart_2, col_chart_3 = st.columns([1, 1, 1])
    with col_chart_1:
      df_plot_distribution_DS_Tron_Thue = df_xml_data.groupby(["DS Tr·ªën thu·∫ø"]).agg({"S·ªë h√≥a ƒë∆°n": 'nunique',  "M√£ s·ªë thu·∫ø ng∆∞·ªùi b√°n": 'nunique'}).reset_index()
      df_plot_distribution_DS_Tron_Thue["Tr·ªën thu·∫ø - Validation"] = df_plot_distribution_DS_Tron_Thue["DS Tr·ªën thu·∫ø"].apply(lambda x: "C√≥ - Tr·ªën thu·∫ø" if x else "Kh√¥ng - Tr·ªën thu·∫ø")
      st.markdown(f"###### :blue[1.1 Bi·ªÉu ƒë·ªì Ph√¢n b·ªë MST Tr·ªën thu·∫ø]")
      fig = px.pie(
          df_plot_distribution_DS_Tron_Thue,
          values="S·ªë h√≥a ƒë∆°n",
          title="",
          color="Tr·ªën thu·∫ø - Validation",
          names="Tr·ªën thu·∫ø - Validation",
          hole=0.3,
          color_discrete_sequence=[
              "#36C2CE",
              "#C1CDCD"
          ])
      fig.update_layout(hovermode="x unified", height=300)
      fig.update_traces(textposition='inside', textinfo='label+value')
      st.plotly_chart(fig, theme="streamlit", use_container_width=True)
      with st.expander("Danh s√°ch tr·ªën thu·∫ø", expanded=False):
        st.dataframe(df_xml_data[df_xml_data['DS Tr·ªën thu·∫ø']])
      with col_chart_2:
        df_plot_distribution_DS_MISS_SHDon = df_xml_data.groupby(["Thi·∫øu SHDon"]).agg({"S·ªë h√≥a ƒë∆°n": 'nunique',  "M√£ s·ªë thu·∫ø ng∆∞·ªùi b√°n": 'nunique'}).reset_index()
        df_plot_distribution_DS_MISS_SHDon["Thi·∫øu SHDon - Validation"] = df_plot_distribution_DS_MISS_SHDon["Thi·∫øu SHDon"].apply(lambda x: "C√≥ Thi·∫øu" if x else "Kh√¥ng Thi·∫øu")
        st.markdown(f"###### :blue[1.2 Ph√¢n b·ªë MST Thi·∫øu SHDon]")
        fig = px.pie(
            df_plot_distribution_DS_MISS_SHDon,
            values="S·ªë h√≥a ƒë∆°n",
            title=f"",
            color="Thi·∫øu SHDon - Validation",
            names="Thi·∫øu SHDon - Validation",
            hole=0.3,
            color_discrete_sequence=[
                "#36C2CE",
                "#C1CDCD"
            ])
        fig.update_layout(hovermode="x unified", height=300)
        fig.update_traces(textposition='inside', textinfo='label+value')
        st.plotly_chart(fig, theme="streamlit", use_container_width=True)
        with st.expander("Danh s√°ch thi·∫øu SHDon", expanded=False):
          st.dataframe(df_xml_data[df_xml_data['Thi·∫øu SHDon']])

      with col_chart_3:
        df_plot_distribution_DS_MISS_MHSo = df_xml_data.groupby(["Thi·∫øu MHSo"]).agg({"S·ªë h√≥a ƒë∆°n": 'nunique',  "M√£ s·ªë thu·∫ø ng∆∞·ªùi b√°n": 'nunique'}).reset_index()
        df_plot_distribution_DS_MISS_MHSo["Thi·∫øu MHSo - Validation"] = df_plot_distribution_DS_MISS_MHSo["Thi·∫øu MHSo"].apply(lambda x: "C√≥ Thi·∫øu" if x else "Kh√¥ng Thi·∫øu")
        st.markdown(f"###### :blue[1.3 Ph√¢n b·ªë MST Thi·∫øu MHSo] \n")
        fig = px.pie(
            df_plot_distribution_DS_MISS_MHSo,
            values="S·ªë h√≥a ƒë∆°n",
            title=f"",
            color="Thi·∫øu MHSo - Validation",
            names="Thi·∫øu MHSo - Validation",
            hole=0.3,
            color_discrete_sequence=[
                "#36C2CE",
                "#C1CDCD"
            ])
        fig.update_layout(hovermode="x unified", height=300)
        fig.update_traces(textposition='inside', textinfo='label+value')
        st.plotly_chart(fig, theme="streamlit", use_container_width=True)
        with st.expander("Danh s√°ch thi·∫øu MHSo", expanded=False):
          st.dataframe(df_xml_data[df_xml_data['Thi·∫øu MHSo']])

    st.markdown(f"###### :blue[2.1 Bi·ªÉu ƒë·ªì Timeline nh·∫≠p d·ªØ li·ªáu]")
    df_plot_distribution_timeline =  df_xml_data.groupby(["Th·ªùi gian c·∫≠p nh·∫≠p"]).agg({"T√™n file": 'nunique',  "M√£ s·ªë thu·∫ø ng∆∞·ªùi b√°n": 'nunique'}).reset_index()
    df_plot_distribution_timeline_1 = df_plot_distribution_timeline[["Th·ªùi gian c·∫≠p nh·∫≠p", "T√™n file"]].rename(columns = {"T√™n file": "S·ªë l∆∞·ª£ng d·ªØ li·ªáu"})
    df_plot_distribution_timeline_1["Type"] = "S·ªë l∆∞·ª£ng Files"
    df_plot_distribution_timeline_2 = df_plot_distribution_timeline[["Th·ªùi gian c·∫≠p nh·∫≠p", "M√£ s·ªë thu·∫ø ng∆∞·ªùi b√°n"]].rename(columns = {"M√£ s·ªë thu·∫ø ng∆∞·ªùi b√°n": "S·ªë l∆∞·ª£ng d·ªØ li·ªáu"})
    df_plot_distribution_timeline_2["Type"] = "S·ªë l∆∞·ª£ng MST"
    df_plot_distribution_timeline_plot = pd.concat([df_plot_distribution_timeline_1, df_plot_distribution_timeline_2], axis=0)
    fig = px.bar(df_plot_distribution_timeline_plot, x="Th·ªùi gian c·∫≠p nh·∫≠p", y="S·ªë l∆∞·ª£ng d·ªØ li·ªáu", color="Type", title="",
                 barmode="group", color_discrete_sequence=["#36C2CE", "#ECFFE6"])
    fig.update_layout(hovermode="x unified", height=400)
    fig.update_xaxes(type='category')
    st.plotly_chart(fig, theme="streamlit", use_container_width=True)


